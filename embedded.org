#+TITLE: Formula Embedded Wiki
#+AUTHOR: Forumula Embedded
#+OPTIONS: toc:2 num:nil H:4 tex:imagemagick
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1"/>
#+HTML_HEAD: <link type="text/css" rel="stylesheet" href="css/bootstrap.min.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style.css" />
#+HTML_HEAD: <script type="text/javascript" src="js/jquery-2.1.3.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="js/jquery-ui.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="js/jquery.tocify.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="js/org-bootstrap.js"></script>

* About
** Where's the code? 
   Here: [[https://github.com/csunfsae/jetsonTx2][Github Repo]] 
** What's the point of this?
   Our objective was to build a Data Acquisition System (DAQ) capable of collecting,
   storing, and transmitting validated data from all on-board equipment to the cloud 
   in real time utilizing a 4G/LTE network. In doing so, current and future CSUN FSAE teams 
   will hold the capability to monitor and benchmark the performance of their vehicle 
   design iterations.
** Where do I run this?
  This software is based around [[http://www.ros.org][ROS]] and, is meant to run on an Nvidia
  Jetson Tx2. In addition to this SOC there are other sensors and boards 
  necessary to communicate with other parts of the system. For a full
  parts list refer to the internal documention found on the Google Drive.
  If you happen to be visiting take a look below to get an idea of what 
  hardware was used to create this project.
** FAQ
*** Why ROS?
    This is the most commonly asked question we get by other computer science 
    students or engineers. The answer to that question is that it provides an excellent 
    means of inter-process communication so that multiple processes written in different 
    languages can communicate efficiently and reliably. Additionally it allows for the 
    software to be expanded upon so that future teams can focus on implementing features
    such as self-driving, collision detection, etc. Lastly it enables us to reuse software
    so we can focus on adding features to our system without compromising its reliability. 
*** Why the Nvidia Jetson?
    This was chosen with a couple of considerations in mind such as I/O availability, 
    flexibility, and speed. It provides all of the necessary means of communication 
    with our sensors and ECUs found on our electric vehicle.
* ROS
** ROS Layout
#+DOWNLOADED: file:///home/cristian/Downloads/JetsonRoshtml.png @ 2019-01-25 18:04:50
[[file:ROS/JetsonRoshtml_2019-01-25_18-04-50.png]]
** Development Philosophy
   We keep a few things in mind when designing and implementing new features.
    1. How maintainable each node will be in the future.
    2. How reusable each node will be in the future.
   
   Understanding how ROS messages and processes function is essential in making
   wise design decisions. Most people are quick to think that by eliminating ROS Nodes
   the system will become more efficent however this isn't always the case. Additionally
   it's important to keep in mind that a monolithic system makes each node more 
   difficult to maintain and reduces the reusebility of the software.
   Therefore when looking to improve the system by either adding additional functionality
   or making improvements to performance it's important to make sure that each node performs
   only a single function (e.g. getting data from a single device and publishing its data). 

   The rest of the sections of the wiki will not necessarily describe individual ROS nodes but 
   instead describe parts of the system refrencing ROS nodes along the way that handle 
   that part of the system. NOTE to maintainers: Update the ROS diagram you wont be the 
   only person developing this so keep the next person informed.
** How to get started running ROS?
   This part of the wiki will assume you have a working OS running with all of the necessary
   kernel modules enabled in order to interface with the appropriate hardware. For a guide on
   this sort of stuff look at the "Helpful Links" part of the wiki. Additionally at the time 
   of ++writing++ editing this wiki ++26 January 2019++ 21 April 2019 all of our nodes, services,
   etc. are based off of the **ROS Melodic Morenia** release. 
*** How do I install all the necessary ROS packages?
    - **See the helpful links section on installing ROS on the tx2**
    - Otherwise a not so helpful link to get started can be found here:[[http://wiki.ros.org/melodic][ DIY Installation]]
*** How do I use Nodejs ROS nodes? 
    - Make sure node is installed. See helpful links.
    - Make sure your Node modules are installed.
    - Check that your CMakeList includes your node files. See helpful links.
*** How do I compile my code? 
    1. Make sure the CMakeList File is correctly configured.
    2. Make sure you =$ source devel/setup.bash= from the =catkin_ws= directory of the project.
    3. Run =$ catkin_make=
    4. Otherwise see the helpful links.
*** How do I run my code?
    Prereq: **Always run =$ source devel/setup.bash= from =catkin_ws= **
    1. Make sure ros core is running: =$ roscore=
    2. To run each process run =$ rosrun fsae_electric_vehicle **Name of your node**= (if its nodejs add the .js extension likewise for python)
*** I'm tired of running each process one by one! 
    You'll have to write your own roslaunch file. Be sure to consult the helpful links but looking at the current one will give you some hints.

* Can Bus  
** CAN Transceiver
#+DOWNLOADED: file:///tmp/qutebrowser-LxFWXM/proxy.duckduckgo.jpg @ 2019-04-21 22:40:54
[[file:Can%20Bus/proxy.duckduckgo_2019-04-21_22-40-54.jpg]]
*** MCP-2551 CAN Board
    Two Can Bus transceivers were used on this system. One was used
    to communicate to the Motor Controller Unit and the other was meant
    for future expansion. 
** Wiring  
   - These transceivers are connected to the Jetson Tx2 using the J26 header.
   - See =J21/J26 Pinout= section for pinout images
*** Can Bus 0
        | Device Pin | Jetson Pin      |
        |------------+-----------------|
        | 5v         | Arduino 5v pin  |
        | GND        | (J26 Header) 11 |
        | CAN_RX     | (J26 Header)  5 |
        | CAN_TX     | (J26 Header)  7 |
*** Can Bus 1
        | Device Pin | Jetson Pin         |
        |------------+--------------------|
        | 5v         | NOT CURRENTLY USED |
        | GND        | (J26 Header) 21    |
        | CAN_RX     | (J26 Header) 15    |
        | CAN_TX     | (J26 Header) 17    |
** Software
   The software used to interact with the MCU is held in the ROS node titled =CAN_BUS=.
   This node is responsible from sending and receiving messages from the MCU (Motor Control Unit)
   as well as the BMS (Battery Management System) via the 5 pin Can Bus port on the Unitek motor 
   controller. This Node receives messages from the web based node and publishes data to 
   the web node responsible from telemetry and sends messages out to the rest of the ECU's mentioned above.
* IMU
** 10 DOF IMU
#+DOWNLOADED: file:///home/cristian/Desktop/10-DOF-IMU-Sensor-C-intro.jpg @ 2019-01-25 21:53:03
[[file:IMU/10-DOF-IMU-Sensor-C-intro_2019-01-25_21-53-03.jpg]]
*** Waveshare 10 DOF IMU (C) 
    This sensor was chosen as it's directly compatible with the jetson via I2C. It currently
    is installed on I2C bus 1. This is made up of both the MPU-9255 (gyro, accel, compass) and 
    the BMP280 (pressure sensor).
** Wiring
   - See =J21/J26 Pinout= section for pinout images
*** I2C BUS 1 
        | Device Pin | Jetson Pin      |
        |------------+-----------------|
        | VCC 5v     | (J21 Header)  2 |
        | GND        | (J21 Header)  6 |
        | SDA        | (J21 Header)  3 |
        | SCL        | (J21 Header)  5 |
        | INT        | NOT USED        |
        | FSYNC      | NOT USED        |

** Software
   The software to support this device is actually split up into two ROS nodes. The 
   first is located in =INERTIAL_MEASUREMENT_UNIT= and the other is in =BAROMETRIC_PRESSURE_SENSOR=. This Waveshare
   device is actually composed to two separate devices the MPU-9255 and the BMP280
   which have two separate addresses on the I2C bus. The MPU-9255 is composed of a
   gyroscope, accelerometer, and compass. The BMP280 is a pressure/temperature sensor.
* Analog Sensors
** Analog to Digital Converter
#+DOWNLOADED: file:///home/cristian/Desktop/NCD_A_TO_D.png @ 2019-01-25 21:57:52
[[file:Analog%20Sensors/NCD_A_TO_D_2019-01-25_21-57-52.png]]
*** NCD 16 Channel Analog to Digital Converter 
** Wiring
  - See =J21/J26 Pinout= section for pinout images
*** I2C BUS 0
        | Device Pin | Jetson Pin      |
        |------------+-----------------|
        | GND        | (J21 Header)  6 |
        | VCC 5v     | (J21 Header)  2 |
        | SDA        | (J21 Header)  3 |
        | SCL        | (J21 Header)  5 |
** Software
* Digital Sensors
#+DOWNLOADED: file:///tmp/qutebrowser-LxFWXM/71DZKc+WAvL._SX466_.jpg @ 2019-04-21 22:57:01
[[file:Digital%20Sensors/71DZKc+WAvL._SX466__2019-04-21_22-57-01.jpg]]
** Arduino Uno
   An arduino uno with an [[https://store.ncd.io/product/i2c-shield-for-arduino-uno/][I2C shield]] was used to interface with the digital sensors 
* 4G LTE
** 4G Modem
#+DOWNLOADED: file:///home/cristian/Desktop/4G_LTE.png @ 2019-01-25 22:00:07
[[file:4G%20LTE/4G_LTE_2019-01-25_22-00-07.png]]
*** Sierra Wireless MC7455
* J21/J26 Pinout 
*** J21 Header
#+DOWNLOADED: file:///home/cristian/Downloads/J21_Pinout.png @ 2019-01-26 13:01:22
[[file:IMU/J21_Pinout_2019-01-26_13-01-22.png]]
*** J26 Header
#+DOWNLOADED: file:///home/cristian/Desktop/J26_Header.png @ 2019-01-25 21:45:45
[[file:Can%20Bus/J26_Header_2019-01-25_21-45-45.png]]
* Helpful Links
  - [[https://www.jetsonhacks.com/2017/03/25/build-kernel-and-modules-nvidia-jetson-tx2/][How to recompile the kernel to get new kernel modules aka drivers.]]
  - [[https://www.jetsonhacks.com/2017/03/21/jetpack-3-0-nvidia-jetson-tx2-development-kit/][How to reinstall the jetpack.]]
  - [[https://www.jetsonhacks.com/2017/03/27/robot-operating-system-ros-nvidia-jetson-tx2/][How to install ROS on the Tx2.]] 
  - [[https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions-enterprise-linux-fedora-and-snap-packages][How to install Nodejs.]] 
  - [[http://wiki.ros.org/rosnodejs][How to ROS your Nodejs.]]
  - [[http://wiki.ros.org/ROS/Tutorials][How to get started with ROS.]]
  - [[http://wiki.ros.org/roslaunch/XML][How to write your roslauch file.]]
  - [[http://wiki.ros.org/roslaunch/XML][Everything about roslauch files.]] 
* License
  Formula Embedded is relased under the GNU AFFERO GENERAL PUBLIC LICENSE.
